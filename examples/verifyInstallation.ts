import IneProcessor from 'react-native-ine-processor';

/**
 * Verifica que el m√≥dulo INE est√© correctamente instalado y funcionando
 * @returns Promise<boolean> - true si el m√≥dulo est√° funcionando correctamente
 */
export const verifyIneProcessor = async (): Promise<boolean> => {
  try {
    console.log('üîç Verificando instalaci√≥n del m√≥dulo INE...');
    
    // Verificar disponibilidad del servicio
    const isAvailable = await IneProcessor.isServiceAvailable();
    
    if (!isAvailable) {
      console.error('‚ùå Servicio INE no disponible');
      console.log('üí° Posibles soluciones:');
      console.log('   - Verificar permisos en AndroidManifest.xml');
      console.log('   - Confirmar que el servicio est√© declarado correctamente');
      console.log('   - Revisar configuraci√≥n de build.gradle');
      return false;
    }
    
    console.log('‚úÖ Servicio INE disponible');
    
    // Obtener informaci√≥n del servicio
    try {
      const serviceInfo = await IneProcessor.getServiceInfo();
      console.log('üìã Informaci√≥n del servicio:', serviceInfo);
    } catch (error) {
      console.warn('‚ö†Ô∏è  No se pudo obtener informaci√≥n del servicio:', error.message);
    }
    
    // Verificar m√©todos principales
    const methods = [
      'processCredential',
      'isValidCredential',
      'processCredentialAsync',
      'cancelTask'
    ];
    
    for (const method of methods) {
      if (typeof IneProcessor[method] !== 'function') {
        console.error(`‚ùå M√©todo ${method} no disponible`);
        return false;
      }
    }
    
    console.log('‚úÖ Todos los m√©todos principales est√°n disponibles');
    
    // Test b√°sico de validaci√≥n (sin imagen real)
    try {
      // Este test deber√≠a fallar graciosamente con una ruta inv√°lida
      await IneProcessor.isValidCredential('/invalid/path/test.jpg');
    } catch (error) {
      // Es esperado que falle, pero no deber√≠a crashear
      if (error.code === 'FILE_NOT_FOUND' || error.message.includes('not found')) {
        console.log('‚úÖ Validaci√≥n de errores funciona correctamente');
      } else {
        console.warn('‚ö†Ô∏è  Error inesperado en validaci√≥n:', error.message);
      }
    }
    
    console.log('üéâ M√≥dulo INE instalado y funcionando correctamente');
    return true;
    
  } catch (error) {
    console.error('‚ùå Error verificando m√≥dulo INE:', error);
    console.log('üí° Posibles soluciones:');
    console.log('   - Verificar que el m√≥dulo est√© instalado: npm install');
    console.log('   - Limpiar cache: npx react-native start --reset-cache');
    console.log('   - Reconstruir proyecto: cd android && ./gradlew clean');
    return false;
  }
};

/**
 * Verifica la configuraci√≥n de permisos de Android
 * @returns Promise<boolean> - true si los permisos est√°n configurados
 */
export const verifyAndroidPermissions = async (): Promise<boolean> => {
  try {
    console.log('üîç Verificando permisos de Android...');
    
    // En un entorno real, aqu√≠ verificar√≠as los permisos
    // Por ahora, solo mostramos qu√© permisos son necesarios
    const requiredPermissions = [
      'android.permission.READ_EXTERNAL_STORAGE',
      'android.permission.WRITE_EXTERNAL_STORAGE',
      'android.permission.CAMERA'
    ];
    
    console.log('üìã Permisos requeridos en AndroidManifest.xml:');
    requiredPermissions.forEach(permission => {
      console.log(`   - ${permission}`);
    });
    
    console.log('‚úÖ Verificaci√≥n de permisos completada');
    console.log('üí° Aseg√∫rate de que estos permisos est√©n en tu AndroidManifest.xml');
    
    return true;
  } catch (error) {
    console.error('‚ùå Error verificando permisos:', error);
    return false;
  }
};

/**
 * Ejecuta una verificaci√≥n completa del m√≥dulo
 * @returns Promise<VerificationResult>
 */
export interface VerificationResult {
  moduleInstalled: boolean;
  serviceAvailable: boolean;
  permissionsConfigured: boolean;
  overallStatus: 'success' | 'warning' | 'error';
  recommendations: string[];
}

export const runCompleteVerification = async (): Promise<VerificationResult> => {
  console.log('üöÄ Iniciando verificaci√≥n completa del m√≥dulo INE...');
  
  const result: VerificationResult = {
    moduleInstalled: false,
    serviceAvailable: false,
    permissionsConfigured: false,
    overallStatus: 'error',
    recommendations: []
  };
  
  // Verificar instalaci√≥n del m√≥dulo
  result.moduleInstalled = await verifyIneProcessor();
  
  // Verificar permisos
  result.permissionsConfigured = await verifyAndroidPermissions();
  
  // Determinar estado general
  if (result.moduleInstalled && result.permissionsConfigured) {
    result.overallStatus = 'success';
    result.serviceAvailable = true;
  } else if (result.moduleInstalled || result.permissionsConfigured) {
    result.overallStatus = 'warning';
    if (!result.moduleInstalled) {
      result.recommendations.push('Reinstalar el m√≥dulo INE');
      result.recommendations.push('Verificar configuraci√≥n de build.gradle');
    }
    if (!result.permissionsConfigured) {
      result.recommendations.push('Configurar permisos en AndroidManifest.xml');
    }
  } else {
    result.overallStatus = 'error';
    result.recommendations.push('Seguir el manual de instalaci√≥n paso a paso');
    result.recommendations.push('Verificar que todos los archivos est√©n en su lugar');
  }
  
  // Mostrar resumen
  console.log('\nüìä Resumen de Verificaci√≥n:');
  console.log(`   M√≥dulo Instalado: ${result.moduleInstalled ? '‚úÖ' : '‚ùå'}`);
  console.log(`   Servicio Disponible: ${result.serviceAvailable ? '‚úÖ' : '‚ùå'}`);
  console.log(`   Permisos Configurados: ${result.permissionsConfigured ? '‚úÖ' : '‚ùå'}`);
  console.log(`   Estado General: ${getStatusEmoji(result.overallStatus)} ${result.overallStatus.toUpperCase()}`);
  
  if (result.recommendations.length > 0) {
    console.log('\nüí° Recomendaciones:');
    result.recommendations.forEach((rec, index) => {
      console.log(`   ${index + 1}. ${rec}`);
    });
  }
  
  return result;
};

function getStatusEmoji(status: string): string {
  switch (status) {
    case 'success': return 'üéâ';
    case 'warning': return '‚ö†Ô∏è';
    case 'error': return '‚ùå';
    default: return '‚ùì';
  }
}

/**
 * Hook de React para usar la verificaci√≥n en componentes
 */
export const useIneVerification = () => {
  const [verificationResult, setVerificationResult] = React.useState<VerificationResult | null>(null);
  const [isVerifying, setIsVerifying] = React.useState(false);
  
  const runVerification = async () => {
    setIsVerifying(true);
    try {
      const result = await runCompleteVerification();
      setVerificationResult(result);
    } catch (error) {
      console.error('Error en verificaci√≥n:', error);
    } finally {
      setIsVerifying(false);
    }
  };
  
  return {
    verificationResult,
    isVerifying,
    runVerification
  };
};